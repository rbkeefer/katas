defmodule ProjectEuler do
  # -------------------------------------------------------
  @doc """
    Problem 2: https://projecteuler.net/problem=2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
  """
  require Integer

  def sum_even_fib_nums(prev1, prev2, max_value, sum_value)
      when prev2 < max_value and Integer.is_even(prev2),
      do: sum_even_fib_nums(prev2, prev1 + prev2, max_value, sum_value + prev2)

  def sum_even_fib_nums(prev1, prev2, max_value, sum_value)
      when prev2 < max_value,
      do: sum_even_fib_nums(prev2, prev1 + prev2, max_value, sum_value)

  def sum_even_fib_nums(_prev1, _prev2, _max_no, sum_value), do: sum_value

  # -------------------------------------------------------
  @doc """
    Problem 1: https://projecteuler.net/problem=1
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
  """
  def sum_mult35(arg) do
    _sum_mult35(0, arg, 0)
  end

  defp _sum_mult35(current_value, max_value, sum_value)
       when current_value == max_value,
       do: sum_value

  defp _sum_mult35(current_value, max_value, sum_value)
       when rem(current_value, 3) == 0,
       do: _sum_mult35(current_value + 1, max_value, sum_value + current_value)

  defp _sum_mult35(current_value, max_value, sum_value)
       when rem(current_value, 5) == 0,
       do: _sum_mult35(current_value + 1, max_value, sum_value + current_value)

  defp _sum_mult35(current_value, max_value, sum_value),
    do: _sum_mult35(current_value + 1, max_value, sum_value)
end
