defmodule ProjectEuler do
  require Integer

  # -------------------------------------------------------
  @doc """
    Problem 4: https://projecteuler.net/problem=4
    A palindromic number reads the same both ways. The largest palindrome made
    from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
  """
  def largest_palindrome(max_no) do
    find_max(max_no, max_no, 0)
  end

  defp find_max(x, _y, max_value) when x == 0, do: max_value
  defp find_max(x, y, max_value) when y == 0, do: find_max(x - 1, 99, max_value)

  defp find_max(x, y, max_value) do
    if(is_palindrome?(x * y, x * y, 0)) do
      x * y
    else
      find_max(x, y - 1, max_value)
    end
  end

  defp is_palindrome?(x, a, b) when a < 1, do: x == b
  defp is_palindrome?(x, a, b), do: is_palindrome?(x, div(a, 10), b * 10 + rem(a, 10))

  # -------------------------------------------------------
  @doc """
    Problem 3: https://projecteuler.net/problem=3
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
  """
  def prime_factors(num) do
    _prime_factors(num, 2)
  end

  defp _prime_factors(num, prime_num)
       when num >= prime_num * prime_num and rem(num, prime_num) == 0,
       do: [prime_num | _prime_factors(div(num, prime_num), prime_num)]

  defp _prime_factors(num, prime_num)
       when num >= prime_num * prime_num,
       do: _prime_factors(num, prime_num + 1)

  defp _prime_factors(num, _prime_num), do: [num]

  # -------------------------------------------------------
  @doc """
    Problem 2: https://projecteuler.net/problem=2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
  """

  def sum_even_fib_nums(prev1, prev2, max_value, sum_value)
      when prev2 < max_value and Integer.is_even(prev2),
      do: sum_even_fib_nums(prev2, prev1 + prev2, max_value, sum_value + prev2)

  def sum_even_fib_nums(prev1, prev2, max_value, sum_value)
      when prev2 < max_value,
      do: sum_even_fib_nums(prev2, prev1 + prev2, max_value, sum_value)

  def sum_even_fib_nums(_prev1, _prev2, _max_no, sum_value), do: sum_value

  # -------------------------------------------------------
  @doc """
    Problem 1: https://projecteuler.net/problem=1
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
  """
  def sum_mult35(arg) do
    _sum_mult35(0, arg, 0)
  end

  defp _sum_mult35(current_value, max_value, sum_value)
       when current_value == max_value,
       do: sum_value

  defp _sum_mult35(current_value, max_value, sum_value)
       when rem(current_value, 3) == 0,
       do: _sum_mult35(current_value + 1, max_value, sum_value + current_value)

  defp _sum_mult35(current_value, max_value, sum_value)
       when rem(current_value, 5) == 0,
       do: _sum_mult35(current_value + 1, max_value, sum_value + current_value)

  defp _sum_mult35(current_value, max_value, sum_value),
    do: _sum_mult35(current_value + 1, max_value, sum_value)
end
